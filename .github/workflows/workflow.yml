name: CI workflow

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    container: python:3.9-slim
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src --count --max-complexity=10 --max-line-length=127 --statistics
      - name: Run unit tests with nose
        run: nosetests -v --with-spec --spec-color --with-coverage --cover-package=app
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          # Path to your CodeQL queries (assuming you have a 'codeql' directory)
          queries: codeql/queries
      
          # Language of the code you are analyzing
          language: python
      
          # Path to the CodeQL database (a directory where the analysis results are stored)
          database-path: ./codeql-database
      
          # The name of the SARIF file (Static Analysis Results Interchange Format)
          sarif-file: codeql-results.sarif
      
          # Additional options for the CodeQL CLI
          options: -j 0 --fail-on=warning

          # Example matrix for multi-language support
          strategy:
            matrix:
              language: [ 'python', 'javascript' ]
              # Add more languages as needed
          env:
            # Specify the CodeQL CLI version
            CODEQL_CLI: "2.7.2"

      - name: Dependency Scanning
        uses: github/dependency-graph-action@v2

      - name: Publish Coverage Report
        if: always() # Ensure coverage is published even if tests fail
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          flags: unittests

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Documentation
        run: |
          pip install sphinx
          sphinx-quickstart -p docs source
          sphinx-build -b html source docs

      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
